[1mdiff --git a/app/__init__.py b/app/__init__.py[m
[1mindex aa4ee1d..2e4094a 100644[m
[1m--- a/app/__init__.py[m
[1m+++ b/app/__init__.py[m
[36m@@ -1,9 +1,5 @@[m
[31m-from app.routes import home, dashboard, api[m
[32m+[m[32mfrom app.routes import home, dashboard[m
 from flask import Flask[m
[31m-from app.db import init_db[m
[31m-from app.utils import filters[m
[31m-[m
[31m-[m
 def create_app(test_config=None):[m
   # set up app config[m
   app = Flask(__name__, static_url_path='/')[m
[36m@@ -11,15 +7,10 @@[m [mdef create_app(test_config=None):[m
   app.config.from_mapping([m
     SECRET_KEY='super_secret_key'[m
   )[m
[31m-  app.jinja_env.filters['format_url'] = filters.format_url[m
[31m-  app.jinja_env.filters['format_date'] = filters.format_date[m
[31m-  app.jinja_env.filters['format_plural'] = filters.format_plural[m
   @app.route('/hello')[m
   def hello():[m
     return 'hello world'[m
   # register routes[m
   app.register_blueprint(home)[m
[31m-  app.register_blueprint(dashboard) [m
[31m-  app.register_blueprint(api) [m
[31m-  init_db(app)[m
[32m+[m[32m  app.register_blueprint(dashboard)[m[41m  [m
   return app[m
\ No newline at end of file[m
[1mdiff --git a/app/db/__init__.py b/app/db/__init__.py[m
[1mindex 09346aa..f299dd2 100644[m
[1m--- a/app/db/__init__.py[m
[1m+++ b/app/db/__init__.py[m
[36m@@ -3,29 +3,10 @@[m [mfrom sqlalchemy.ext.declarative import declarative_base[m
 from sqlalchemy import create_engine[m
 from sqlalchemy.orm import sessionmaker[m
 from dotenv import load_dotenv[m
[31m-from flask import g[m
 [m
 load_dotenv()[m
 [m
 # connect to database using env variable[m
 engine = create_engine(getenv('DB_URL'), echo=True, pool_size=20, max_overflow=0)[m
 Session = sessionmaker(bind=engine)[m
[31m-Base = declarative_base()[m
[31m-[m
[31m-def init_db(app):[m
[31m-  Base.metadata.create_all(engine)[m
[31m-[m
[31m-  app.teardown_appcontext(close_db)[m
[31m-[m
[31m-def get_db():[m
[31m-  if 'db' not in g:[m
[31m-    # store db connection in app context[m
[31m-    g.db = Session()[m
[31m-[m
[31m-  return g.db[m
[31m-[m
[31m-def close_db(e=None):[m
[31m-  db = g.pop('db', None)[m
[31m-[m
[31m-  if db is not None:[m
[31m-    db.close()[m
\ No newline at end of file[m
[32m+[m[32mBase = declarative_base()[m
\ No newline at end of file[m
[1mdiff --git a/app/models/Comment.py b/app/models/Comment.py[m
[1mdeleted file mode 100644[m
[1mindex ad218e0..0000000[m
[1m--- a/app/models/Comment.py[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-from datetime import datetime[m
[31m-from app.db import Base[m
[31m-from sqlalchemy import Column, Integer, String, ForeignKey, DateTime[m
[31m-from sqlalchemy.orm import relationship[m
[31m-[m
[31m-class Comment(Base):[m
[31m-  __tablename__ = 'comments'[m
[31m-  id = Column(Integer, primary_key=True)[m
[31m-  comment_text = Column(String(255), nullable=False)[m
[31m-  user_id = Column(Integer, ForeignKey('users.id'))[m
[31m-  post_id = Column(Integer, ForeignKey('posts.id'))[m
[31m-  created_at = Column(DateTime, default=datetime.now)[m
[31m-  updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)[m
[31m-[m
[31m-  user = relationship('User')[m
[1mdiff --git a/app/models/Post.py b/app/models/Post.py[m
[1mdeleted file mode 100644[m
[1mindex 840ba50..0000000[m
[1m--- a/app/models/Post.py[m
[1m+++ /dev/null[m
[36m@@ -1,21 +0,0 @@[m
[31m-from datetime import datetime[m
[31m-from app.db import Base[m
[31m-from .Vote import Vote[m
[31m-from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, select, func[m
[31m-from sqlalchemy.orm import relationship, column_property[m
[31m-[m
[31m-class Post(Base):[m
[31m-  __tablename__ = 'posts'[m
[31m-  id = Column(Integer, primary_key=True)[m
[31m-  title = Column(String(100), nullable=False)[m
[31m-  post_url = Column(String(100), nullable=False)[m
[31m-[m
[31m-  #SELECT COUNT(votes.id) AS vote_count FROM votes WHERE votes.post_id = 1;[m
[31m-  vote_count = column_property(select([func.count(Vote.id)]).where(Vote.post_id == id)) [m
[31m-  [m
[31m-  user_id = Column(Integer, ForeignKey('users.id'))[m
[31m-  created_at = Column(DateTime, default=datetime.now)[m
[31m-  updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)[m
[31m-  user = relationship('User')[m
[31m-  comments = relationship('Comment', cascade='all,delete')[m
[31m-  votes = relationship('Vote', cascade='all,delete')[m
[1mdiff --git a/app/models/User.py b/app/models/User.py[m
[1mindex 26fa2fc..e69de29 100644[m
[1m--- a/app/models/User.py[m
[1m+++ b/app/models/User.py[m
[36m@@ -1,29 +0,0 @@[m
[31m-from app.db import Base[m
[31m-from sqlalchemy import Column, Integer, String[m
[31m-from sqlalchemy.orm import validates[m
[31m-import bcrypt[m
[31m-[m
[31m-class User(Base):[m
[31m-  __tablename__ = 'users'[m
[31m-  id = Column(Integer, primary_key=True)[m
[31m-  username = Column(String(50), nullable=False)[m
[31m-  email = Column(String(50), nullable=False, unique=True)[m
[31m-  password = Column(String(100), nullable=False)[m
[31m-[m
[31m-  @validates('email')[m
[31m-  def validate_email(self, key, email):[m
[31m-    # make sure email address contains @ character[m
[31m-    assert '@' in email[m
[31m-[m
[31m-    return email[m
[31m-  @validates('password')[m
[31m-  def validate_password(self, key, password):[m
[31m-    assert len(password) > 4[m
[31m-    # encrypt password[m
[31m-    salt = bcrypt.gensalt()[m
[31m-    return bcrypt.hashpw(password.encode('utf-8'), salt)   [m
[31m-  [m
[31m-  def verify_password(self, password):[m
[31m-    return bcrypt.checkpw([m
[31m-      password.encode('utf-8'),[m
[31m-      self.password.encode('utf-8'))[m
\ No newline at end of file[m
[1mdiff --git a/app/models/Vote.py b/app/models/Vote.py[m
[1mdeleted file mode 100644[m
[1mindex 1cf5599..0000000[m
[1m--- a/app/models/Vote.py[m
[1m+++ /dev/null[m
[36m@@ -1,8 +0,0 @@[m
[31m-from app.db import Base[m
[31m-from sqlalchemy import Column, Integer, ForeignKey[m
[31m-[m
[31m-class Vote(Base):[m
[31m-  __tablename__ = 'votes'[m
[31m-  id = Column(Integer, primary_key=True)[m
[31m-  user_id = Column(Integer, ForeignKey('users.id'))[m
[31m-  post_id = Column(Integer, ForeignKey('posts.id'))[m
\ No newline at end of file[m
[1mdiff --git a/app/models/__init__.py b/app/models/__init__.py[m
[1mindex 95a8e34..e69de29 100644[m
[1m--- a/app/models/__init__.py[m
[1m+++ b/app/models/__init__.py[m
[36m@@ -1,4 +0,0 @@[m
[31m-from .User import User[m
[31m-from .Post import Post[m
[31m-from .Comment import Comment[m
[31m-from .Vote import Vote[m
\ No newline at end of file[m
[1mdiff --git a/app/routes/__init__.py b/app/routes/__init__.py[m
[1mindex f8037cd..e3efbf2 100644[m
[1m--- a/app/routes/__init__.py[m
[1m+++ b/app/routes/__init__.py[m
[36m@@ -1,3 +1,2 @@[m
 from .home import bp as home[m
[31m-from .dashboard import bp as dashboard[m
[31m-from .api import bp as api[m
\ No newline at end of file[m
[32m+[m[32mfrom .dashboard import bp as dashboard[m
\ No newline at end of file[m
[1mdiff --git a/app/routes/api.py b/app/routes/api.py[m
[1mdeleted file mode 100644[m
[1mindex 7c844f3..0000000[m
[1m--- a/app/routes/api.py[m
[1m+++ /dev/null[m
[36m@@ -1,149 +0,0 @@[m
[31m-import sys[m
[31m-from flask import Blueprint, request, jsonify, session[m
[31m-from app.models import User, Post, Comment, Vote[m
[31m-from app.db import get_db[m
[31m-[m
[31m-bp = Blueprint('api', __name__, url_prefix='/api')[m
[31m-[m
[31m-@bp.route('/users', methods=['POST'])[m
[31m-def signup():[m
[31m-  data = request.get_json()[m
[31m-  db = get_db()[m
[31m-  try:[m
[31m-    # attempt creating a new user[m
[31m-    newUser = User([m
[31m-      username = data['username'],[m
[31m-      email = data['email'],[m
[31m-      password = data['password'][m
[31m-    )[m
[31m-[m
[31m-    db.add(newUser)[m
[31m-  